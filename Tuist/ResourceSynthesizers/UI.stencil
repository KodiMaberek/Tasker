// swiftlint:disable:this file_name
// swiftlint:disable all
// swift-format-ignore-file
// swiftformat:disable all
// Generated using tuist â€” https://github.com/tuist/tuist

{% if catalogs %}
{% set enumName %}{{param.name}}Asset{% endset %}
{% set arResourceGroupType %}{{param.name}}ARResourceGroup{% endset %}
{% set colorType %}{{param.name}}Colors{% endset %}
{% set dataType %}{{param.name}}Data{% endset %}
{% set imageType %}{{param.name}}Images{% endset %}
{% set forceNamespaces %}{{param.forceProvidesNamespaces|default:"false"}}{% endset %}
{% set bundleToken %}{{param.name}}Resources{% endset %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
#if os(macOS)
  import AppKit
#elseif os(iOS)
{% if resourceCount.arresourcegroup > 0 %}
  import ARKit
{% endif %}
  import UIKit
#elseif os(tvOS) || os(watchOS)
  import UIKit
#endif
#if canImport(SwiftUI)
  import SwiftUI
#endif

// MARK: - Implementation Details

{% if resourceCount.arresourcegroup > 0 %}
{{accessModifier}} struct {{arResourceGroupType}}: Sendable {
  {{accessModifier}} let name: String

  #if os(iOS)
  @available(iOS 11.3, *)
  {{accessModifier}} var referenceImages: Set<ARReferenceImage> {
    return ARReferenceImage.referenceImages(in: self)
  }

  @available(iOS 12.0, *)
  {{accessModifier}} var referenceObjects: Set<ARReferenceObject> {
    return ARReferenceObject.referenceObjects(in: self)
  }
  #endif
}

#if os(iOS)
@available(iOS 11.3, *)
{{accessModifier}} extension ARReferenceImage {
  static func referenceImages(in asset: {{arResourceGroupType}}) -> Set<ARReferenceImage> {
    let bundle = Bundle.module
    return referenceImages(inGroupNamed: asset.name, bundle: bundle) ?? Set()
  }
}

@available(iOS 12.0, *)
{{accessModifier}} extension ARReferenceObject {
  static func referenceObjects(in asset: {{arResourceGroupType}}) -> Set<ARReferenceObject> {
    let bundle = Bundle.module
    return referenceObjects(inGroupNamed: asset.name, bundle: bundle) ?? Set()
  }
}
#endif

{% endif %}
{% if resourceCount.color > 0 %}
{{accessModifier}} final class {{colorType}}: Sendable {
  {{accessModifier}} let name: String

  #if os(macOS)
  {{accessModifier}} typealias Color = NSColor
  #elseif os(iOS) || os(tvOS) || os(watchOS) || os(visionOS)
  {{accessModifier}} typealias Color = UIColor
  #endif

  @available(iOS 11.0, tvOS 11.0, watchOS 4.0, macOS 10.13, visionOS 1.0, *)
  {{accessModifier}} var color: Color {
    return Color(resource: self)
  }

  #if canImport(SwiftUI)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, visionOS 1.0, *)
  {{accessModifier}} var swiftUIColor: SwiftUI.Color {
      return SwiftUI.Color(self)
  }
  #endif

  fileprivate init(name: String) {
    self.name = name
  }
}

{{accessModifier}} extension {{colorType}}.Color {
  @available(iOS 11.0, tvOS 11.0, watchOS 4.0, macOS 10.13, visionOS 1.0, *)
  convenience init(resource asset: {{colorType}}) {
    let bundle = Bundle.module
    #if os(iOS) || os(tvOS) || os(visionOS)
    self.init(named: asset.name, in: bundle, compatibleWith: nil)!
    #elseif os(macOS)
    self.init(named: NSColor.Name(asset.name), bundle: bundle)!
    #elseif os(watchOS)
    self.init(named: asset.name)!
    #endif
  }
}

#if canImport(SwiftUI)
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, visionOS 1.0, *)
{{accessModifier}} extension SwiftUI.Color {
  init(_ asset: {{colorType}}) {
    let bundle = Bundle.module
    self.init(asset.name, bundle: bundle)
  }
}
#endif

{% endif %}
{% if resourceCount.data > 0 %}
{{accessModifier}} struct {{dataType}}: Sendable {
  {{accessModifier}} let name: String

  #if os(iOS) || os(tvOS) || os(macOS) || os(visionOS)
  @available(iOS 9.0, macOS 10.11, visionOS 1.0, *)
  {{accessModifier}} var data: NSDataAsset {
    guard let data = NSDataAsset(asset: self) else {
      fatalError("Unable to load data asset named \\(name).")
    }
    return data
  }
  #endif
}

#if os(iOS) || os(tvOS) || os(macOS) || os(visionOS)
@available(iOS 9.0, macOS 10.11, visionOS 1.0, *)
{{accessModifier}} extension NSDataAsset {
  convenience init?(asset: {{dataType}}) {
    let bundle = Bundle.module
    #if os(iOS) || os(tvOS) || os(visionOS)
    self.init(name: asset.name, bundle: bundle)
    #elseif os(macOS)
    self.init(name: NSDataAsset.Name(asset.name), bundle: bundle)
    #endif
  }
}
#endif

{% endif %}
{% if resourceCount.image > 0 or resourceCount.symbol > 0 %}
{{accessModifier}} struct {{imageType}}: Sendable {
  {{accessModifier}} let name: String

  #if os(macOS)
  {{accessModifier}} typealias Image = NSImage
  #elseif os(iOS) || os(tvOS) || os(watchOS) || os(visionOS)
  {{accessModifier}} typealias Image = UIImage
  #endif

  {{accessModifier}} var image: Image {
    let bundle = Bundle.module
    #if os(iOS) || os(tvOS) || os(visionOS)
    let image = Image(named: name, in: bundle, compatibleWith: nil)
    #elseif os(macOS)
    let image = bundle.image(forResource: NSImage.Name(name))
    #elseif os(watchOS)
    let image = Image(named: name)
    #endif
    guard let result = image else {
      fatalError("Unable to load image asset named \\(name).")
    }
    return result
  }

  #if canImport(SwiftUI)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, visionOS 1.0, *)
  {{accessModifier}} var swiftUIImage: SwiftUI.Image {
    SwiftUI.Image(self)
  }
  #endif
}

{{accessModifier}} extension UIImage {
    convenience init(resource asset: {{imageType}}) {
        let bundle = Bundle.module
        self.init(named: asset.name, in: bundle, compatibleWith: nil)!
    }
    
    convenience init?(assetName: String) {
        let bundle = Bundle.module
        self.init(named: assetName, in: bundle, compatibleWith: nil)
    }
}

#if canImport(SwiftUI)
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, visionOS 1.0, *)
{{accessModifier}} extension SwiftUI.Image {
  init(_ asset: {{imageType}}) {
    let bundle = Bundle.module
    self.init(asset.name, bundle: bundle)
  }

  init(_ asset: {{imageType}}, label: Text) {
    let bundle = Bundle.module
    self.init(asset.name, bundle: bundle, label: label)
  }

  init(decorative asset: {{imageType}}) {
    let bundle = Bundle.module
    self.init(decorative: asset.name, bundle: bundle)
  }
}
#endif

{% endif %}
{% if catalogs.first.assets %}
{% macro colorShortcuts assets %}
{% for asset in assets %}
{% if asset.type == "color" %}
@available(iOS 11.0, tvOS 11.0, watchOS 4.0, macOS 10.13, visionOS 1.0, *)
{{accessModifier}} extension {{colorType}}.Color {
    static var {{asset.name|swiftIdentifier:"pretty"|lowerFirstWord}}: {{colorType}}.Color {
        let bundle = Bundle.module
        #if os(iOS) || os(tvOS) || os(visionOS)
        return {{colorType}}.Color(named: "{{asset.value}}", in: bundle, compatibleWith: nil)!
        #elseif os(macOS)
        return {{colorType}}.Color(named: NSColor.Name("{{asset.value}}"), bundle: bundle)!
        #elseif os(watchOS)
        return {{colorType}}.Color(named: "{{asset.value}}")!
        #endif
    }
}

#if canImport(SwiftUI)
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, visionOS 1.0, *)
{{accessModifier}} extension SwiftUI.Color {
    static var {{asset.name|swiftIdentifier:"pretty"|lowerFirstWord}}: SwiftUI.Color {
        let bundle = Bundle.module
        return SwiftUI.Color("{{asset.value}}", bundle: bundle)
    }
}

@available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, visionOS 1.0, *)
{{accessModifier}} extension SwiftUI.ShapeStyle where Self == SwiftUI.Color {
    static var {{asset.name|swiftIdentifier:"pretty"|lowerFirstWord}}: SwiftUI.Color {
        let bundle = Bundle.module
        return SwiftUI.Color("{{asset.value}}", bundle: bundle)
    }
}
#endif
{% elif asset.items %}
{% call colorShortcuts asset.items %}
{% endif %}
{% endfor %}
{% endmacro %}

{% macro imageShortcuts assets %}
{% for asset in assets %}
{% if asset.type == "image" or asset.type == "symbol" %}
{{accessModifier}} extension {{imageType}}.Image {
    static var {{asset.name|swiftIdentifier:"pretty"|lowerFirstWord}}: {{imageType}}.Image {
        let bundle = Bundle.module
        #if os(iOS) || os(tvOS) || os(visionOS)
        return {{imageType}}.Image(named: "{{asset.value}}", in: bundle, compatibleWith: nil)!
        #elseif os(macOS)
        return bundle.image(forResource: NSImage.Name("{{asset.value}}"))!
        #elseif os(watchOS)
        return {{imageType}}.Image(named: "{{asset.value}}")!
        #endif
    }
}

#if canImport(SwiftUI)
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, visionOS 1.0, *)
{{accessModifier}} extension SwiftUI.Image {
    static var {{asset.name|swiftIdentifier:"pretty"|lowerFirstWord}}: SwiftUI.Image {
        let bundle = Bundle.module
        return SwiftUI.Image("{{asset.value}}", bundle: bundle)
    }
}
#endif
{% elif asset.items %}
{% call imageShortcuts asset.items %}
{% endif %}
{% endfor %}
{% endmacro %}

{% if resourceCount.color > 0 %}
// MARK: - Colors
{% call colorShortcuts catalogs.first.assets %}
{% endif %}

{% if resourceCount.image > 0 or resourceCount.symbol > 0 %}
// MARK: - Images
{% call imageShortcuts catalogs.first.assets %}
{% endif %}

{% if resourceCount.data > 0 %}
{% macro dataAccessors assets %}
{% for asset in assets %}
{% if asset.type == "data" %}
extension {{dataType}} {
    {{accessModifier}} static let {{asset.name|swiftIdentifier:"pretty"|lowerFirstWord}} = {{dataType}}(name: "{{asset.value}}")
}
{% elif asset.items %}
{% call dataAccessors asset.items %}
{% endif %}
{% endfor %}
{% endmacro %}

// MARK: - Data Assets
{% call dataAccessors catalogs.first.assets %}
{% endif %}

{% if resourceCount.arresourcegroup > 0 %}
{% macro arResourceAccessors assets %}
{% for asset in assets %}
{% if asset.type == "arresourcegroup" %}
extension {{arResourceGroupType}} {
    {{accessModifier}} static let {{asset.name|swiftIdentifier:"pretty"|lowerFirstWord}} = {{arResourceGroupType}}(name: "{{asset.value}}")
}
{% elif asset.items %}
{% call arResourceAccessors asset.items %}
{% endif %}
{% endfor %}
{% endmacro %}

// MARK: - AR Resource Groups
{% call arResourceAccessors catalogs.first.assets %}
{% endif %}
{% endif %}
{% else %}
// No assets found
{% endif %}
// swiftlint:enable all
// swiftformat:enable all
